demo()
myfirstobject = 5:10
myfirstobject
plot(myfirstobject)
setwd("~/src/rCourse(s)")
install.packages("plotrix")
library(plotrix)
?plot
set.seed(65)
# with argument name, exact argument order
runif(9, 3, 6)
runif(9, 3, 6)
runif(3, 6, 9)
# with argument name, mixed argument order
runif(min = 3, max = 6, n = 9)
set.seed(65)
# without argument name, mixed argument order
runif(3, 6, 9) # this means n=3, max=9
set.seed(65)
# using only the first argument
runif(3)
set.seed(65)
# using arguments 1 and 3
runif(3,,4)
# R as a calculator
4 + 4                        + 5
# Using several operators and round brackets
(5-3)^3
boot
a = 5:8
a = 5:8
a = 5:8;
b = c(5:8)
a = 5:8
?plot.ts
a = 5:8
b = c(5:8)
?plot.ts
plot.ts(c(5,3,7,8,3))
plot.ts(5,3,7,8,3)
# Creating objects
x <- c(4,5,6)
# R as a calculator
4 + 4                        + 5
# Using several operators and round brackets
(5-3)^3
12 + 45
12 + 45 - 45 * 10^2
12 + 45 - 45(10^2)
12 + 45 - 45 * 10^2
12 + 45 - 45 * 10^2 + 5576
# Creating objects
x <- c(4,5,6)
c(4, 5.2, 76) -> y # arrows work both directions
x = c(4,5,6)
assign("x", c(4.2, 1, 5)) # function assign
x = c(4,5,6)
x # display in console
# See which objects are already created
ls()
objects()
# Removing an object
rm("x")
# Working with vectors
x = c(y, 5, y)
# Working with vectors
x = c(y, 5, y)
x
# Sum and roots
sum(x)
# Values at a given position within the vector
x[1]
newobject <- x < 5; newobject
x # Comparison against original values
?seq # starting with the seq function
seq() # just using the default settings
# simple sequence from 3 to 5
seq(3, 5)
seq(from = 3, to = 5)
# using length
seq(from = 3, length = 3)
# step manipulations
seq(from = 3, length = 3, by = 0.5)
seq(from = 3, by = 0.5, length = 3) # changed order
paste(1:4)
class(paste(1:4)) # checking the class
paste("xyz", 1:10)
paste("xyz", c(2,5,7,"test", 4.5)) # random vector with numbers and characters
paste("xyz", 1:10, sep = "") # modifying the seperator
rep(c(3,4,5), 3)
rep(1:10, times = 3)
x = c(1,2,3) # creating x
rep(x, each = 3, times = 3) # combining arguments
x = 4:20 # our data
which(x == 10) # double equal sign, logical operation
x[3]
myobject = 1:10
# 2. Get the sum of your object
sum(myobject)
paste("R is great 4 and I will love it")
paste("R is great 7 and I will love it")
paste("R is great 45 and I will love it")
x = c(4,5,6)
paste("xyz", c(2,5,7,"test", 4.5)) # random vector with numbers and characters
myobject = 1:10
myobject = (1:10)
myobject -> 1:10
myobject -> 1:10
myobject -> (1:10)
myobject = (1:10)
myobject -> (1:10)
myobject <- (1:10)
assign("myobject",1:10)
# 2. Get the sum of your object
sum(myobject)
paste("R is great", c(4,7,45), "and I will love it")
# 4. vector of 1,2,3 : repeat the vector to get 11 x 1, 10 x 2, and 10 x 3
x = rep(1:3, length = 31)
# 4. vector of 1,2,3 : repeat the vector to get 11 x 1, 10 x 2, and 10 x 3
x = rep(1:3, length = 31); x
# 5. What is the value of this vector on position 7
x[7]
myfirstfn(10)
# Functions in R
myfirstfn <- function(x){x+x}
myfirstfn(10)
#stepwise functions
mysecondfn <- function(t,z){
value =z*3
value = value *t
print(value)
}
mysecondfn(t,z)
#stepwise functions
mysecondfn <- function(t,z){
value =z*3
value = value *t
print(value)
}
t = 5
z = 10
mysecondfn(t,z)
#stepwise functions
mysecondfn <- function(t,z){
value =z*3
value = value *t
print(value)
}
t = 12,000
for (i in 1:15) {print (i)}
PrimVec = function(n){
# to start from 2
if (n>=2) {
# to further specify the sequence we want to work with
s = seq(2,n)
# p will be the container for our primes,
# numbers will be moved from s to p step by step if they meet the
criteria
p = c()
# we start the loop
for (i in seq(2,n)){
# we use any to check that i (of this loop round) is still in s, multiples of i
will be removed
if(any(s==i)){
# we store i if it meets our criteria in p together with the previous p
p = c(p,i)
# to search for numbers with a remainder at modulus division
s = c(s[(s%%i) != 0],i)
}}
return(p) }
# to specify the output if n < 2 (optional)
else{
stop("Input at least 2")
}}
PrimVec(100)
?airmiles
head(airmiles) # first 6 rows
PrimVec = function(n){
# to start from 2
if (n>=2) {
# to further specify the sequence we want to work with
s = seq(2,n)
# p will be the container for our primes,
# numbers will be moved from s to p step by step if they meet the
criteria
p = c()
# we start the loop
for (i in seq(2,n)){
# we use any to check that i (of this loop round) is still in s, multiples of i
will be removed
if(any(s==i)){
# we store i if it meets our criteria in p together with the previous p
p = c(p,i)
# to search for numbers with a remainder at modulus division
s = c(s[(s%%i) != 0],i)
}}
return(p) }
# to specify the output if n < 2 (optional)
else{
stop("Input at least 2")
}}
for (i in 1:15) {print (i)}
for (z in 1:15) {print (z)}
PrimVec = function(n){
# to start from 2
if (n>=2) {
# to further specify the sequence we want to work with
s = seq(2,n)
# p will be the container for our primes,
# numbers will be moved from s to p step by step if they meet the
criteria
p = c()
# we start the loop
for (i in seq(2,n)){
# we use any to check that i (of this loop round) is still in s, multiples of i
will be removed
if(any(s==i)){
# we store i if it meets our criteria in p together with the previous p
p = c(p,i)
# to search for numbers with a remainder at modulus division
s = c(s[(s%%i) != 0],i)
}}
return(p) }
# to specify the output if n < 2 (optional)
else{
stop("Input at least 2")
}}
PrimVec(100)
?airmiles
head(airmiles) # first 6 rows
tail(airmiles) # last 6 rows
?airmiles
head(airmiles) # first 6 rows
tail(airmiles) # last 6 rows
summary(mtcars)
plot(mtcars) # simple xy plot function of R Base
hist(airmiles) # histogram
head(mtcars)
sum(mtcars$wt)
attach(mtcars) # attach to R session environment
sum(wt) # now R knows which data.frame to use since it is attached
detach(mtcars) # remove it from environment
sum(wt) # error message since mtcars it not attached any more
mtcars[2,6]
mtcars[c(2,5,8),6]
for (i in 1:15) {print (i)}
git status
which git
x=5:7 # 3 data points, integers
y=8:10
# default plot output here is a scatterplot
plot(x,y)
# data is a time series, default here is a line plot
plot(lynx)
# title, color, title color, title magnification
plot(lynx, main="Lynx Trappings", col="red",
col.main=52, cex.main=1.5)
# label names
plot(lynx, ylab="Lynx Trappings", xlab="")
# label orientation
plot(lynx, ylab="Lynx Trappings", xlab="", las=2)
# changing the session paramter, 2*2 plot matrix
par(mfrow=c(2,2), col.axis="red")
# changing the session paramter, 2*2 plot matrix
par(mfrow=c(2,2), col.axis="red")
plot(1:8, las=0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las=1, xlab="xlab", ylab="ylab", main="LAS = 1")
plot(1:8, las=2, xlab="xlab", ylab="ylab", main="LAS = 2")
plot(1:8, las=3, xlab="xlab", ylab="ylab", main="LAS = 3")
plot(1:8, las=0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las=1, xlab="xlab", ylab="ylab", main="LAS = 1")
plot(1:8, las=2, xlab="xlab", ylab="ylab", main="LAS = 2")
plot(1:8, las=3, xlab="xlab", ylab="ylab", main="LAS = 3")
colors()
?pch
x=2:4
plot(x, pch="c") # using letters as point symbols
plot(x, pch=13) # symbol nr 13
par(mfrow=c(1,1), col.axis="black") # setting parameters back to default
library(plotrix) # add on package for "ablineclip", install if not yet available
plot(1:7, ylab="", main="Line Types lty 0:6", xlab="lty 0:6") # test plot
ablineclip(v=1, lty=1, col="sienna2", lwd=2) # solid (default)
ablineclip(v=2, lty=2, col="sienna2", lwd=2) # dashed
ablineclip(v=3, lty=3, col="sienna2", lwd=2) # dotted
ablineclip(v=4, lty=4, col="sienna2", lwd=2) # dotdash
ablineclip(v=5, lty=5, col="sienna2", lwd=2) # longdash
ablineclip(v=6, lty=6, col="sienna2", lwd=5) # twodash, thicker for comparison
ablineclip(v=7, lty=0, col="sienna2", lwd=2) # blank
? plot
plot(lynx) # plot for time series data
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="b", main="Type b") # points connected by lines
plot(lynx, type="b", main="Type c") # lines only of b
plot(lynx, type="o", main="Type o") # points overlaid by lines
plot(lynx, type="h", main="Type h") # high density
plot(lynx, type="s", main="Type s") # steps
plot(lynx, type="n", main="Type n") # no plot
par(mar=c(4,3,3,3), col.axis="darkgreen") # change of plot margins
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
par(new=T) # allows 2 in 1 plot
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4, col = "darkblue") # y axis for plot 2
text(37, 18, "Stopping distance in ft", cex=0.85, col="darkblue") # explanations to plot 2
title(main="Speed and Stopping\n Distances of Cars") # main title
?par
par()
# 1. get familiar with "rivers" - how many observations?
rivers()
# 1. get familiar with "rivers" - how many observations?
x = rivers()
# 1. get familiar with "rivers" - how many observations?
?rivers
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4, col = "darkblue") # y axis for plot 2
text(37, 18, "Stopping distance in ft", cex=0.85, col="darkblue") # explanations to plot 2
title(main="Speed and Stopping\n Distances of Cars") # main title
# 2. plot rivers against its index (hint: number of observation on x)
plot(rivers$index, type="s", bty="n", ann=F, axes=F, col="lightblue")
# 2. plot rivers against its index (hint: number of observation on x)
x = 1:141
# 2. plot rivers against its index (hint: number of observation on x)
x = 1:141
y = rivers
plot(x,y)
# 3. add: header (red), label names
title(main="Lengths of Major N. American Rivers")
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85, col="red")
title(main="Lengths of Major N. American Rivers")
title(main="Lengths of Major N. American Rivers", col="red")
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=1, col="red")
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85, col="red")
title(main="Lengths of Major N. American Rivers", col="red")
plot(lynx, type="p", main="Type p")
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
plot(x, type="p", main="Lengths of Major N. American Rivers")
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
plot(1:8, las=0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4, col = "darkblue") # y axis for plot 2
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
par(new=T) # allows 2 in 1 plot
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4, col = "darkblue") # y axis for plot 2
text(37, 18, "Stopping distance in ft", cex=0.85, col="darkblue") # explanations to plot 2
title(main="Speed and Stopping\n Distances of Cars") # main title
?par
par()
# 1. get familiar with "rivers" - how many observations?
?rivers #141
# 2. plot rivers against its index (hint: number of observation on x)
x = 1:141
y = rivers
plot(x,y)
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85)
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85, pch = 0,square)
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85, pch = 0)
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85)
plot(lynx, type="p", main="Lengths of Major N. American Rivers",pch = 19)
plot(lynx, type="p", main="Lengths of Major N. American Rivers",pch = 17)
# 1. get familiar with "rivers" - how many observations?
?rivers #141
# 3. add: header (red), label names
text(34, 18, "Lengths in miles", cex=0.85)
plot(lynx, type="p", main="Lengths of Major N. American Rivers",pch = 17, col="green")
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
plot(lynx, type="p", main="Lengths of Major N. American Rivers")
# 4. change the point symbol and point color
plot(lynx, type="p", main="Lengths of Major N. American Rivers",pch = 17, col="green")
# 4. change the point symbol and point color
plot(lynx, type="p", main="Lengths of Major N. American Rivers",pch = 5, col="green")
plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
# 4. change the point symbol and point color
plot(lynx, type="p", main="Lengths of Major N. American Rivers",pch = 5, col="green")
?rivers
plot(x,y, col="green",pch=20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
?apply
apply(X, 1, mean)
X - matrix(c(1:9), nr- 3, byrow - T)
apply(X, 1, mean)
apply(X, 2, mean)
apply(X, 1, plot)
apply(X, 1, plot)
apply(x, 1, plot)
x - matrix(c(1:9), nr- 3, byrow - t)
apply(x, 1, plot)
install.packages("ggplot2")
shapiro.test(depthsmall)
library(ggplot2)
head(diamonds)
qqnorm(depth)
hist(depth)
depthsmall = sample(depth, 5000)
shapiro.test(depthsmall)
attach(diamonds)
qqnorm(depth)
hist(depth)
qqnorm(depth)
hist(depth)
cvm.test(depth)
#Normality test
library(nortest)
install.packages("nortest")
#Normality test
library(nortest)
cvm.test(depth)
lillie.test(depth)
sf.test(depthsmall)
cvm.test(depth)
lillie.test(depth)
sf.test(depthsmall)
pearson.test(depth)
install.packages("stringr")
install.packages("plyr")
pos - readLines("positive_words.txt")
neg - readLines("negative_words.txt")
library("stringr")
library("plyr")
score.sentiment = function(sentences, pos.words, neg.words, .progress= "none")
score.sentiment = function(sentences, pos.words, neg.words, .progress= "none")
{
scores = laply(sentences,
function(sentence, pos.words, neg.words)
sentence = gsub("[[:punc:]]", "", sentence)
sentence - gsub("[[:cntr:]]", "", sentence)
sentence = gsub('\\d+', '', sentence)
tryTolower - function(x){
y = NA
try_error = tryCatch(tolower(x), error =function(e) e)
if (!inherits(try_error, "error"))
y = tolower(x)
return(y)
}
sentence = sapply(sentence, tryTolower)
word.list = str_split(sentence, "\\s+")
words = unlist(word.list)
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)
return(score)
}
?mtcars
install.packages("lattice")
?mtcars
attach(mtcars)
library(lattice)
with(mtcars, xyplot(wt ~ mpg, group=cyl, auto.key=T, pch=20, cex=3))
install.packages("class")
?knn
?knn
?KNN
knn(train, test, cl=cyl, k=2, prob=T)
